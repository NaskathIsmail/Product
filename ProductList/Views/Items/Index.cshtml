@model ProductList.Models.ItemIndexViewModel

@{
    ViewBag.Title = "Item List";
}

<div class="container">
    <div class="row">
        <!-- Item List -->
        <div class="col-md-6">
            <h2>Item List</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>PKey</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="itemTableBody">
                    @foreach (var item in Model.Items)
                    {
                        <tr>
                            <td>@item.PKey</td>
                            <td>@item.Name</td>
                            <td>@item.Description</td>
                            <td>@item.Price</td>
                            <td>
                                <a href="javascript:void(0);" class="btn btn-warning edit-button" data-id="@item.PKey">Edit</a>
                                <button class="btn btn-danger delete-button" data-id="@item.PKey">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Add/Edit Item Form -->
        <div class="col-md-6">
            <h2 id="formTitle">Manage Item</h2>
            @using (Html.BeginForm("Create", "Items", FormMethod.Post, new { @id = "itemForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.ItemForm.PKey, new { id = "itemPKey" })
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemForm.Name)
                    @Html.TextBoxFor(m => m.ItemForm.Name, new { @class = "form-control", id = "itemName" })

                    @Html.ValidationMessageFor(model => model.ItemForm.Name, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemForm.Description)
                    @Html.TextBoxFor(m => m.ItemForm.Description, new { @class = "form-control", id = "itemDescription" })

                </div>
                <div class="form-group">
                    @Html.LabelFor(m => m.ItemForm.Price)
                    @Html.TextBoxFor(m => m.ItemForm.Price, new { @class = "form-control", id = "itemPrice" })
                    @Html.ValidationMessageFor(m => m.ItemForm.Price, "", new { @class = "text-danger" })
                </div><br />
                <button type="submit" class="btn btn-primary" id="formSubmitButton">Add Item</button>
            }
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validate/1.19.3/jquery.validate.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-validation-unobtrusive/3.2.12/jquery.validate.unobtrusive.min.js"></script>

<script>
    $(document).ready(function () {

        $('.edit-button').click(function () {
            var id = $(this).data('id');
            $.ajax({
                url: '@Url.Action("GetItem", "Items")',
                type: 'GET',
                data: { id: id },
                success: function (response) {
                    if (response.success) {
                        var item = response.item;
                        $('#itemPKey').val(item.PKey);
                        $('#itemName').val(item.Name);
                        $('#itemDescription').val(item.Description);
                        $('#itemPrice').val(item.Price);
                        $('#formTitle').text('Edit Item');
                        $('#formSubmitButton').text('Update Item');
                        $('#itemForm').attr('action', '@Url.Action("Edit", "Items")');
                    } else {
                        alert('Error fetching item details: ' + response.message);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.error('Error details:', jqXHR, textStatus, errorThrown);
                    alert('Error fetching item details: ' + textStatus);
                }
            });
        });

        $('.delete-button').click(function () {
            var id = $(this).data('id');
            console.log("Attempting to delete item with ID:", id); // Log ID being deleted
            if (confirm('Are you sure you want to delete this item?')) {
                $.ajax({
                    url: '@Url.Action("Delete", "Items")',
                    type: 'POST',
                    data: {
                        id: id,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        console.log("Delete response:", response); // Log the response
                        if (response.success) {
                            alert('Item deleted successfully!');
                            location.reload();
                        } else {
                            alert('Error deleting item: ' + response.message);
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error('Error details:', jqXHR, textStatus, errorThrown);
                        alert('Error deleting item: ' + textStatus);
                    }
                });
            }
        });
    });
</script>
